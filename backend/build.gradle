import org.gradle.api.JavaVersion

plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'dev.bug'
sourceCompatibility = JavaVersion.VERSION_11

ext {
    swaggerCodegenVersionV3 = '3.0.19'
    swaggerCoreVersionV3 = '3.0.19'
    swaggerVersion = '2.4.0'
    swaggerAnnotationVersion = '1.5.21'
    jacksonVersion = '2.9.4'
    jerseyVersion = '2.25.1'
    mapperVersion = '2.3.7'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    swaggerCodegenV3
}

repositories {
    mavenCentral()
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'org.springframework.boot'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    swaggerCodegenV3 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.5'
    swaggerCodegenV3 'org.openapitools:openapi-generator-cli:3.3.4'
    compile group: 'org.webjars', name: 'swagger-ui', version: '3.23.8'
    testCompile group: 'io.swagger.parser.v3', name: 'swagger-parser', version: '2.0.17'

    compile "io.swagger:swagger-annotations:${swaggerAnnotationVersion}"
    compile "org.glassfish.jersey.core:jersey-client:${jerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-multipart:${jerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    // Mapper
    compile "org.modelmapper:modelmapper:${mapperVersion}"

}

swaggerSources {
    openapi {
        inputFile = file('src/main/resources/static/openapi.yaml')
        code {
            language = 'spring'
            components = [models: true, apis: true, apiTests: false]
            additionalProperties = [
                    'modelPackage': 'dev.bug.api.ra.openapi.dto',
                    'apiPackage': 'dev.bug.api.ra.openapi',
                    'invokerPackage': 'dev.bug.api.ra.openapi',
                    'dateLibrary': 'java8',
                    'hideGenerationTimestamp': 'true',
                    'interfaceOnly': 'true',
                    'useBeanValidation': 'true'
            ]
            configuration = configurations.swaggerCodegenV3
        }
    }
}

compileJava.dependsOn swaggerSources.openapi.code
sourceSets.main.java.srcDir "${swaggerSources.openapi.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.openapi.code.outputDir}/src/main/resources"

test {
    useJUnitPlatform()
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}